definitions:
  apperror.Error:
    properties:
      errCode:
        type: string
      errMsg:
        type: string
      wrappedErr: {}
    type: object
  dto.AddReviewDTO:
    properties:
      rating:
        maximum: 5
        minimum: 1
        type: integer
      review:
        type: string
    required:
    - rating
    - review
    type: object
  dto.LoginUserReq:
    properties:
      email:
        type: string
      fingerprint:
        type: string
      password:
        type: string
    required:
    - email
    - fingerprint
    - password
    type: object
  dto.LoginUserResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.LogoutReq:
    properties:
      fingerprint:
        type: string
      refresh_token:
        type: string
    required:
    - fingerprint
    type: object
  dto.PatchOfferStatusReq:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  dto.PatchOfferStatusResp:
    properties:
      new_status:
        type: string
    type: object
  dto.RefreshReq:
    properties:
      fingerprint:
        type: string
      refresh_token:
        type: string
    required:
    - fingerprint
    type: object
  dto.RefreshResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.RegistrationUserReq:
    properties:
      email:
        type: string
      fingerprint:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    required:
    - email
    - fingerprint
    - name
    - password
    - phone
    type: object
  dto.RegistrationUserResp:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  entity.ProductReview:
    properties:
      created_at:
        type: string
      id:
        type: integer
      product_id:
        type: integer
      rating:
        type: integer
      review:
        type: string
      user_id:
        type: integer
    type: object
  entity.SellerReview:
    properties:
      created_at:
        type: string
      id:
        type: integer
      rating:
        type: integer
      review:
        type: string
      seller_id:
        type: integer
      user_id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/products/{id}/reviews:
    get:
      consumes:
      - application/json
      description: Получает все отзывы о продукте по его ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список отзывов
          schema:
            items:
              $ref: '#/definitions/entity.ProductReview'
            type: array
        "400":
          description: Некорректный ID продукта
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение списка отзывов о продукте
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Добавляет новый отзыв о продукте
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.AddReviewDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Отзыв успешно добавлен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ввод
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавление отзыва о продукте
      tags:
      - reviews
  /api/sellers/{id}/reviews:
    get:
      consumes:
      - application/json
      description: Получает все отзывы о продавце по его ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список отзывов
          schema:
            items:
              $ref: '#/definitions/entity.SellerReview'
            type: array
        "400":
          description: Некорректный ID продавца
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Продавец не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получение списка отзывов о продавце
      tags:
      - reviews
    post:
      consumes:
      - application/json
      description: Добавляет новый отзыв о продавце
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: integer
      - description: Данные отзыва
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/dto.AddReviewDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Отзыв успешно добавлен
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Некорректный ввод
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неавторизованный доступ
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Продавец не найден
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Внутренняя ошибка сервера
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Добавление отзыва о продавце
      tags:
      - reviews
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает токены access/refresh
      parameters:
      - description: Учетные данные пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginUserResp'
        "400":
          description: Bad Request
          schema: {}
      summary: Аутентификация пользователя
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Выход пользователя и инвалидация токена обновления
      parameters:
      - description: Данные для выхода
        in: body
        name: logout
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
      summary: Выход из системы
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Обновляет токены access и refresh
      parameters:
      - description: Данные токена refresh
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RefreshResp'
        "400":
          description: Bad Request
          schema: {}
      summary: Обновление токенов
      tags:
      - auth
  /auth/reg:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя и возвращает токены доступа/обновления
      parameters:
      - description: Данные для регистрации пользователя
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegistrationUserReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RegistrationUserResp'
        "400":
          description: Bad Request
          schema: {}
      summary: Регистрация нового пользователя
      tags:
      - auth
  /health:
    get:
      description: Возвращает статус сервера и текущее время
      produces:
      - application/json
      responses:
        "200":
          description: Успешный ответ с данными
          schema:
            additionalProperties: true
            type: object
      summary: Получить статус сервера
      tags:
      - health
  /offers/{offerID}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Offer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Offer status update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.PatchOfferStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PatchOfferStatusResp'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperror.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperror.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.Error'
      summary: Update offer status
      tags:
      - offer
securityDefinitions:
  BearerAuth:
    description: 'Bearer token for authentication. Format: "Bearer <token>"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
